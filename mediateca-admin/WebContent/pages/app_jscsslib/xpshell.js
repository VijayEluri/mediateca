function DataTable(f) {	this.form = f;	this.queryObj = new Object(); // store Query Info	this.queryObj.recordCount = 0;	this.queryObj.startRow = 0;	this.queryObj.maxRow = 0;	this.passThruParamsObj = new Object();}/*	Add methods*/// Refresh the data tableDataTable.prototype.refresh = function() {	window.location.reload(true);}// Set the template to post data toDataTable.prototype.setAction = function(a) {	this.form.setAttribute("action",a);}// Get URL Parameter QueryDataTable.prototype.getPassThruParamString = function() {	var i; var urlStr = "";	for(i in this.passThruParamsObj) {		if(urlStr.length)			urlStr = urlStr + "\&";		urlStr = urlStr + i + "\=" + encodeURI(this.passThruParamsObj[i]);	}	return urlStr;}// Submit the form and process dataDataTable.prototype.processCommand = function(cmd) {	this.form.command.value = cmd;	this.form.submit();}// Set a pass-through parameterDataTable.prototype.setPassThruParam = function(name,data) {	this.passThruParamsObj[name] = data;}// Set an attribute of the data table query objectDataTable.prototype.setQueryAttribute = function(name,data) {	this.queryObj[name] = data;}// Retrieve an attribute of the data table query objectDataTable.prototype.getQueryAttribute = function(name) {	return this.queryObj[name];}// Count the number of selected records on a pageDataTable.prototype.getSelectedCount = function() {	var n = 0; var r = this.form.selectedRecords;	if(r) {		if(r.value) { // One checkbox on page			n = r.checked ? 1 : 0;		} else { // Multiple checkboxes			for(var i=0;i<r.length;i++)				if(r[i].checked) n++ // Iterate through records		}	}	return n;}// Get an array (or list) of the selected records IDsDataTable.prototype.getSelectedIdArray = function() {	var a = new Array(); var r = this.form.selectedRecords;	if(r) {		if(r.value) {			a[a.length] = r.value;		} else {			for(var i=0;i<r.length;i++)				if(r[i].checked) a[a.length] = r[i].value;		}	}	return a;}// Select all recordsDataTable.prototype.selectAll = function() {	var r = this.form.selectedRecords;	var c = event.srcElement.checked; // Check Event	var v = c ? true : false;	for(var i=0;i<r.length;i++)		r[i].checked = v;	this.refreshTaskMenu();}// Select a rowDataTable.prototype.selectRow = function() {	var e = event.srcElement;	if(e.nodeName!="INPUT") {		var p = e.parentNode.firstChild.getElementsByTagName("INPUT")[0];		if(p.checked)			p.checked = false;		else			p.checked = true;	}	this.refreshTaskMenu();}// Navigate to the previous records pageDataTable.prototype.navBack = function() {	var s = parseInt(this.getQueryAttribute("startRow"));	var m = parseInt(this.getQueryAttribute("maxRow"));	var t = this.getQueryAttribute("sort");	var v = s-m;	var newStartRow= (v>1) ? v : 1;	window.location.replace(queryInfo.thisPage+"?startRow="+newStartRow+"&sort="+t+"&"+this.getPassThruParamString());}// Navigate to the next records pageDataTable.prototype.navNext = function() {	var s = parseInt(this.getQueryAttribute("startRow"));	var m = parseInt(this.getQueryAttribute("maxRow"));	var r = parseInt(this.getQueryAttribute("recordCount"));	var t = this.getQueryAttribute("sort");	var v = s+m;	var newStartRow= (v<r) ? v : s;	window.location.replace(queryInfo.thisPage+"?startRow="+newStartRow+"&sort="+t+"&"+this.getPassThruParamString());}// Go to a specific pageDataTable.prototype.goToPage = function(p) {	var s = parseInt(this.getQueryAttribute("startRow"));	var m = parseInt(this.getQueryAttribute("maxRow"));	var r = parseInt(this.getQueryAttribute("recordCount"));	var t = this.getQueryAttribute("sort");	var v = p*m-m+1;	var newStartRow = (v<r) ? v : s;	window.location.replace(queryInfo.thisPage+"?startRow="+newStartRow+"&sort="+t+"&"+this.getPassThruParamString());}// Sort a columnDataTable.prototype.sortBy = function(col) {	var s = parseInt(this.getQueryAttribute("startRow"));	window.location.replace(queryInfo.thisPage+"?startRow="+s+"&sort="+col+"&"+this.getPassThruParamString());}// Refresh the task menu with the appropriate informationDataTable.prototype.refreshTaskMenu = function() {	var n = this.getSelectedCount();	if(n==1)		tasks.innerHTML = singleRecordActionHTML;	else if(n>1)		tasks.innerHTML = multiRecordActionHTML;	else // nothing		tasks.innerHTML = globalRecordActionHTML;	//generalInfo.innerHTML = "<b>"+n+" record(s) selected</b>";}// Deprecated Functionsfunction getCurrentSelected() {	selectedArray = new Array();	for(i=0;i<f.selectedRecords.length;i++) {		if(f.selectedRecords[i].checked) {			selectedArray[selectedArray.length] = f.selectedRecords[i].value;		}	}	return selectedArray;}function EX_countSelected(e) {	count=0;	for(i=0;i<e.length;i++) {		if(e[i].checked) { count++ }	}	return count;}function EX_rowSel(E){	if(E.nodeName=="INPUT") {		// Checkbox itself		if (E.checked) {			EX_rowHlToggle(E,1);		} else {			EX_rowHlToggle(E,0);		}	} else {		// Cell Row		P=E.parentNode.firstChild.getElementsByTagName("INPUT")[0];		P.checked=(P.checked ? false : true);		EX_rowSel(P);	}	//showInfo('','records');}function EX_rowHlToggle(E,tog){	if (document.all) {		while (E.tagName!="TR") {			E=E.parentElement;		}	} else {		while (E.tagName!="TR") {			E=E.parentNode;		}	}	E.className = ((tog) ? "hi" : "");	refreshTasks();}function EX_selectAll() { // deselects with FALSE argument	checkedValue = ((arguments.length&&(arguments[0]==false)) ? false : true);	for(i=0;i<f.selectedRecords.length;i++) {		f.selectedRecords[i].checked=checkedValue;		EX_rowHlToggle(f.selectedRecords[i],checkedValue);	}	refreshTasks();}// requires f (global object)function EX_moveSelectedRecords(action,msg1,msg2) {	c = EX_countSelected(f.selectedRecords);	if(c) {		if(c==1) {			msg=(msg1+" this record "+msg2);		} else {			msg=(msg1+" "+c+" records "+msg2);		}		if(confirm(msg)) {			f.moveAction.value=action;			f.submit();		}	}}